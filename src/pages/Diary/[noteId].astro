---
import "../../styles/global.css";
import Menu from "../../components/Menu.astro";
import { db } from "../../scripts/firebaseConfig.js";
import { collection, getDocs } from "firebase/firestore";

export async function getStaticPaths() {
  try {
    // 1. Obtener todos los usuarios
    const usersSnapshot = await getDocs(collection(db, "users"));
    const paths = [];
    
    // 2. Para cada usuario, obtener sus notas
    for (const userDoc of usersSnapshot.docs) {
      const userCode = userDoc.id;
      const notesRef = collection(db, "users", userCode, "notes");
      const notesSnapshot = await getDocs(notesRef);
      
      // 3. Crear ruta para cada nota
      notesSnapshot.forEach((noteDoc) => {
        const noteData = noteDoc.data();
        paths.push({
          params: { noteId: noteDoc.id },
          props: {
            noteData: {
              titulo: noteData.titulo || "Nota sin tÃ­tulo",
              fecha: noteData.fecha || new Date().toLocaleString("es-ES"),
              texto: noteData.texto || noteData.aprendizaje || "Contenido no disponible",
              emocion: noteData.emocion || "",
              logro: noteData.logro || ""
            },
            userCode: userCode
          }
        });
      });
    }

    // 4. Si no hay notas, crear una de ejemplo
    if (paths.length === 0) {
      paths.push({
        params: { noteId: 'ejemplo' },
        props: {
          noteData: {
            titulo: 'Ejemplo de nota',
            fecha: new Date().toLocaleString("es-ES"),
            texto: 'Esta es una nota de ejemplo generada durante el build',
            emocion: 'ðŸ˜Š Feliz',
            logro: 'Configurar mi diario'
          },
          userCode: 'default'
        }
      });
    }

    return paths;
  } catch (error) {
    console.error("Error en getStaticPaths:", error);
    // Retornar al menos una ruta de ejemplo si hay error
    return [
      {
        params: { noteId: 'ejemplo' },
        props: {
          noteData: {
            titulo: 'Nota de ejemplo',
            fecha: new Date().toLocaleString("es-ES"),
            texto: 'Error al cargar notas. Esta es una nota de ejemplo.',
            emocion: 'ðŸ¤” Pensativo',
            logro: 'Solucionar problemas'
          },
          userCode: 'default'
        }
      }
    ];
  }
}

const { noteId } = Astro.params;
const { noteData } = Astro.props;
---

<!doctype html>
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Mi Diario - {noteData.titulo}</title>
</head>
<body>
    <div class="container">
        <div class="menu">
            <Menu />
        </div>
        <div class="information">
            <button class="back-button" onclick="history.back()" aria-label="Volver">
                <svg xmlns="http://www.w3.org/2000/svg" class="icon-arrow" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                </svg>
            </button>

            <div class="note-content">
                <h2>{noteData.titulo}</h2>
                <p class="note-date">{noteData.fecha.split(',')[0]}</p>
                
                {noteData.emocion && (
                  <div class="note-section">
                    <h3>EmociÃ³n:</h3>
                    <p>{noteData.emocion}</p>
                  </div>
                )}
                
                <div class="note-section">
                  <h3>Contenido:</h3>
                  <p class="note-text">{noteData.texto}</p>
                </div>
                
                {noteData.logro && (
                  <div class="note-section">
                    <h3>Logro:</h3>
                    <p>{noteData.logro}</p>
                  </div>
                )}
            </div>
        </div>
    </div>

    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            font-family: 'Inter', sans-serif;
            background-color: #f9fafb;
        }
        .container {
            display: flex;
            height: 100vh;
            width: 100%;
        }
        .menu {
            width: 250px;
            background-color: #184D6D;
            color: white;
        }
        .information {
            flex: 1;
            padding: 2rem;
            overflow-y: auto;
        }
        .back-button {
            background-color: #184D6D;
            color: white;
            border: none;
            padding: 0.5rem;
            border-radius: 50%;
            cursor: pointer;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .note-content {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .note-date {
            color: #666;
            font-style: italic;
            margin-bottom: 1.5rem;
        }
        .note-section {
            margin-bottom: 1.5rem;
        }
        .note-section h3 {
            color: #184D6D;
            margin-bottom: 0.5rem;
        }
        .note-text {
            line-height: 1.6;
            white-space: pre-line;
        }
    </style>
</body>
</html>

